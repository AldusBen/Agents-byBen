import numpy as np
import matplotlib.pyplot as plt
from scipy.spatial.distance import euclidean
Fill functions to create agents on the grid
def fill_row_col(array, row, col, is_row):
    val = 0  # Starting value
    start, end, step = (col, 32, 1) if is_row else (row, 32, 1)  # Determine fill range
    for i in range(start, end, step):
        array[row if is_row else i, col if is_row else i] = val  # Fill the grid
        val = val + 1 if val < 9 else 0  # Reset value after reaching 9
def create_object(is_male, z_pos, race_char):
    array = np.zeros((32, 32))  # Initialize a 32x32 grid
    coords = []  # To hold coordinates
    spots = np.random.choice(32 * 32, 10, replace=False)  # Random unique spots
## Fill coordinates based on random spots
for spot in spots:
    row, col = divmod(spot, 32)
    coords.append((row, col))
    array[row, col] = 0  # Mark spot as occupied

## Different filling strategies based on gender and race
if is_male:
    if race_char == 'M':
        for row, col in coords[:5]:
            fill_row_col(array, row, col, True)
        for row, col in coords[5:]:
            fill_row_col(array, row, col, False)
    else:  # Q
        for row, col in coords[:5]:
            fill_row_col(array, row, col, False)
        for row, col in coords[5:]:
            fill_row_col(array, row, col, True)
else:
    if race_char == 'W':
        for row, col in coords[:5]:
            fill_row_col(array, row, col, False)
        for row, col in coords[5:]:
            fill_row_col(array, row, col, True)
    else:  # Q
        for row, col in coords[:5]:
            fill_row_col(array, row, col, True)
        for row, col in coords[5:]:
            fill_row_col(array, row, col, False)

return {
    'array': array,
    'coords': coords,
    'z_pos': z_pos,
    'race_char': race_char
}

def create_shape_mask(array, is_row=True):
    coords = np.argwhere(array > 0)  # Find occupied coordinates
    if coords.size:
        min_r, max_r = coords[:, 0].min(), coords[:, 0].max()  # Row limits
        min_c, max_c = coords[:, 1].min(), coords[:, 1].max()  # Column limits
        mask = np.zeros((32, 32))  # Initialize mask
        if is_row:
            mask[min_r:max_r+1, min_c:max_c+1] = 1
        else:
            mask[min_r:max_r+1, min_c:max_c+1] = 1
    else:
        mask = np.zeros((32, 32))  # No occupied space
    return mask
def calc_crossings_average(array, coords, is_male, race_char):
    row_coords = coords[5:] if (is_male and race_char == 'M') or (not is_male and race_char == 'W') else coords[:5]
    col_coords = coords[:5] if (is_male and race_char == 'M') or (not is_male and race_char == 'W') else coords[5:]
    crossings = [array[r_row, c_col] + array[r_col, c_row] for r_row, c_row in row_coords for r_col, c_col in col_coords if r_row == r_col or c_row == c_col]
    return np.mean(crossings) if crossings else 0
def calc_total_length(coords):
    return sum(euclidean(coords[i], coords[j]) for i in range(len(coords)) for j in range(i + 1, len(coords)))
def create_complete_agent(is_male):
    z_positions = sorted(np.random.choice(32, 10, replace=False))  # Random Z positions
    gender_marker = 'M' if is_male else 'W'  # Gender character
    race = [gender_marker] + ['M' if i in np.random.choice(range(1, 9), 4, replace=False) else 'Q' for i in range(1, 10)]
    race = ''.join(race)  # Create race string
    objects = [create_object(is_male, z, race[i]) for i, z in enumerate(z_positions)]  # Create objects for the agent
stats = {
    'row_area': 0, 'col_area': 0, 'shared_area': 0,
    'row_unique': 0, 'col_unique': 0, 'remaining_area': 0,
    'line_length': 0, 'crossings_avg': 0
}

## Calculate statistics for each object
for obj in objects:
    row_mask = create_shape_mask(obj['array'], True)  # Row mask
    col_mask = create_shape_mask(obj['array'], False)  # Column mask
    row_area, col_area = np.sum(row_mask), np.sum(col_mask)  # Area calculations
    shared_area = np.sum(row_mask * col_mask)
    row_unique, col_unique = row_area - shared_area, col_area - shared_area
    total_area = 32 * 32
    combined_area = np.sum(np.logical_or(row_mask, col_mask))
    remaining_area = total_area - combined_area
    line_length = calc_total_length(obj['coords'])  # Length estimation
    crossings_avg = calc_crossings_average(obj['array'], obj['coords'], is_male, obj['race_char'])  # Crossing average

    stats['row_area'] += row_area
    stats['col_area'] += col_area
    stats['shared_area'] += shared_area
    stats['row_unique'] += row_unique
    stats['col_unique'] += col_unique
    stats['remaining_area'] += remaining_area
    stats['line_length'] += line_length
    stats['crossings_avg'] += crossings_avg

stats['crossings_avg'] /= 10  # Average crossings calculation
stats['is_male'] = is_male
return {'objects': objects, 'z_positions': z_positions, 'race': race, **stats}

np.random.seed(42)  # Set random seed for reproducibility
agents = [create_complete_agent(is_male) for is_male in [True] * 4 + [False] * 4]  # Create 8 agents
Visualization of the agents
plt.figure(figsize=(12, 12))  # Define figure size
Loop over each agent to plot its grid representation
for idx, agent in enumerate(agents):
    plt.subplot(4, 4, idx + 1)  # Create a grid of subplots
    plt.title(f"Agent {idx+1} | {'Male' if agent['is_male'] else 'Female'} | Race: {agent['race']}")  # Set title
    plt.imshow(agent['objects'][0]['array'], cmap='gray', vmin=0, vmax=1)  # Show the agent's grid
    plt.axis("off")  # Hide axis for cleanliness
plt.tight_layout()  # Adjust layout to avoid overlap
plt.show()  # Display the visualization
